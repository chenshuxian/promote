"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/user";
exports.ids = ["pages/api/user"];
exports.modules = {

/***/ "./pages/api/user.js":
/*!***************************!*\
  !*** ./pages/api/user.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst prisma = new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nasync function handler(req, res) {\n  const q = req.body.q;\n  const api = req.body.api;\n  let status;\n\n  if (req.method === \"POST\") {\n    // 查詢狀態\n    if (api === \"checkStatus\") {\n      status = 99;\n\n      try {\n        const user = await prisma.apply.findUnique({\n          where: {\n            id: q\n          },\n          select: {\n            status: true\n          }\n        });\n\n        if (user) {\n          status = user.status;\n        }\n\n        return res.status(200).send({\n          title: \"處理進度\",\n          status\n        });\n      } catch (err) {\n        console.log(err);\n\n        if (err.code === \"P2002\") {\n          return res.status(400).json({\n            title: \"申請失敗\",\n            msg: \"此身份證已經被申請，請確認輸入是否有誤\"\n          });\n        }\n\n        return res.status(400).send(\"建檔失敗\");\n      }\n    } // 確認用戶名與銀行戶是否相同\n\n\n    if (api === \"checkName\") {\n      // console.log(\"checkName\");\n      let msg = \"銀行戶名必預與申請人相同\";\n      let is_same = 0;\n      let same;\n\n      try {\n        const user = await prisma.apply.findMany({\n          where: {\n            AND: [{\n              name: {\n                equals: q.name\n              }\n            }, {\n              id: {\n                equals: q.id\n              }\n            }]\n          },\n          select: {\n            name: true\n          }\n        });\n        same = Object.keys(user).length; // 戶名和申請人相同\n\n        if (same) {\n          msg = \"申請者與銀行戶名相同\";\n          is_same = 1; // console.log(\"update\" + update);\n\n          msg = \"申請人與銀行戶同相同\";\n        } else {\n          is_same = 0;\n        }\n\n        if (q.id) {\n          const update = await prisma.apply.updateMany({\n            where: {\n              AND: [{\n                status: {\n                  lte: 1\n                }\n              }, {\n                id: {\n                  equals: q.id\n                }\n              }]\n            },\n            data: {\n              is_same_name: is_same\n            }\n          });\n        }\n\n        return res.status(200).send({\n          is_same,\n          msg\n        });\n      } catch (err) {\n        console.log(err);\n\n        if (err.code === \"P2002\") {\n          return res.status(400).json({\n            title: \"申請失敗\",\n            msg: \"此身份證已經被申請，請確認輸入是否有誤\"\n          });\n        }\n\n        return res.status(400).send(\"建檔失敗\");\n      }\n    }\n  } else {\n    res.status(200).json({\n      name: \"John Doe GET\"\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/api/user.js\n");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./pages/api/user.js"));
module.exports = __webpack_exports__;

})();